trigger:
  branches:
    exclude:
    - NativeDesktop
    - Universal

pool:
  vmImage: 'windows-2022'

# Variables
variables:
  version: 17-p3-1
  visualStudioInstallerFile: vs_enterprise__756967286.1628016847.exe
  repositoryName: vs2022_Azure_DevOps
  visualStudioVersion: 2022
  # Secret Variables
#  MAPPED_FTP_HOST: $(FTP_HOST)
#  MAPPED_FTP_USER: $(FTP_USER)
#  MAPPED_FTP_PWD: $(FTP_PWD)
  MAPPED_MEGA_USERNAME: $(MEGA_USERNAME)
  MAPPED_MEGA_PASSWORD: $(MEGA_PASSWORD)

steps:
  - script: |
      $(visualStudioInstallerFile) --passive --layout VS$(visualStudioVersion)-$(version)_layout_$(Build.SourceBranchName) --lang en-US --add Microsoft.VisualStudio.Workload.$(Build.SourceBranchName) --includeRecommended --includeOptional
      dir VS$(visualStudioVersion)-$(version)_layout_$(Build.SourceBranchName)
    displayName: 'Download VS$(visualStudioVersion) $(version) $(Build.SourceBranchName) Items'
    condition: and(ne(variables['Build.SourceBranchName'], 'NativeDesktop'), ne(variables['Build.SourceBranchName'], 'Universal'), ne(variables['Build.SourceBranchName'], 'NativeGame'), ne(variables['Build.SourceBranchName'], 'Flutter'), ne(variables['Build.SourceBranchName'], 'Common'), ne(variables['Build.SourceBranchName'], 'Common+Flutter'))
    timeoutInMinutes: 0

  - script: |
      $(visualStudioInstallerFile) --passive --layout VS$(visualStudioVersion)-$(version)_layout_$(Build.SourceBranchName) --lang en-US --add Microsoft.VisualStudio.Workload.$(Build.SourceBranchName) --includeRecommended
      dir VS$(visualStudioVersion)-$(version)_layout_$(Build.SourceBranchName)
    displayName: 'Download VS$(visualStudioVersion) $(version) $(Build.SourceBranchName) (Reduced) Items'
    condition: or(eq(variables['Build.SourceBranchName'], 'NativeDesktop'), eq(variables['Build.SourceBranchName'], 'NativeGame'))
    timeoutInMinutes: 0

  - script: |
      $(visualStudioInstallerFile) --passive --layout VS$(visualStudioVersion)-$(version)_layout_Universal --lang en-US --add Microsoft.VisualStudio.Workload.Universal --includeRecommended --add Microsoft.VisualStudio.ComponentGroup.UWP.VC --add Microsoft.VisualStudio.ComponentGroup.UWP.VC.v141
      dir VS$(visualStudioVersion)-$(version)_layout_$(Build.SourceBranchName)
    displayName: 'Download VS$(visualStudioVersion) $(version) Universal (Reduced) Items with UWP C++ tools'
    condition: eq(variables['Build.SourceBranchName'], 'Universal')
    timeoutInMinutes: 0

  - script: |
      $(visualStudioInstallerFile) --passive --layout VS$(visualStudioVersion)-$(version)_layout_Flutter --lang en-US --add Microsoft.VisualStudio.Workload.NativeDesktop --includeRecommended --add Microsoft.VisualStudio.Workload.Universal --includeRecommended --add Microsoft.VisualStudio.ComponentGroup.UWP.VC --add Microsoft.VisualStudio.ComponentGroup.UWP.VC.v141
      dir VS$(visualStudioVersion)-$(version)_layout_Flutter
    displayName: 'Download VS$(visualStudioVersion) $(version) NativeDesktop (Reduced) & Universal (Reduced) Items with UWP C++ tools'
    condition: eq(variables['Build.SourceBranchName'], 'Flutter')
    timeoutInMinutes: 0

  - script: |
      $(visualStudioInstallerFile) --passive --layout VS$(visualStudioVersion)-$(version)_layout_Common --lang en-US --add Microsoft.VisualStudio.Workload.ManagedDesktop --includeRecommended --includeOptional --add Microsoft.VisualStudio.Workload.NetWeb --includeRecommended --includeOptional
      dir VS$(visualStudioVersion)-$(version)_layout_Common
    displayName: 'Download VS$(visualStudioVersion) $(version) ManagedDesktop & NetWeb Items'
    condition: eq(variables['Build.SourceBranchName'], 'Common')
    timeoutInMinutes: 0

  - script: |
      $(visualStudioInstallerFile) --passive --layout VS$(visualStudioVersion)-$(version)_layout_Common+Flutter --lang en-US --add Microsoft.VisualStudio.Workload.ManagedDesktop --includeRecommended --add Microsoft.VisualStudio.Workload.NetWeb --includeRecommended --add Microsoft.VisualStudio.Workload.NativeDesktop --add Microsoft.VisualStudio.Workload.Universal --includeRecommended --add Microsoft.VisualStudio.ComponentGroup.UWP.VC
      dir VS$(visualStudioVersion)-$(version)_layout_Common+Flutter
    displayName: 'Download VS$(visualStudioVersion) $(version) ManagedDesktop (Reduced), NetWeb (Reduced), NativeDesktop (More Reduced) & Universal (Reduced) Items with (Reduced) UWP C++ tools'
    condition: eq(variables['Build.SourceBranchName'], 'Common+Flutter')
    timeoutInMinutes: 0

  # Check for Zip
  - script: CALL Info-ZIP-3.0\zip.exe --version
    displayName: 'Check for Zip'

  # Compress Workload Directory & Verify Compress
  - script: |
      CALL Info-ZIP-3.0\zip.exe -r VS$(visualStudioVersion)-$(version)_layout_$(Build.SourceBranchName).zip VS$(visualStudioVersion)-$(version)_layout_$(Build.SourceBranchName)
      echo
      echo Current Directory Contents
      echo --------------------------------------------------------
      dir
    displayName: 'Zip VS$(visualStudioVersion) $(version) $(Build.SourceBranchName) Directory'

  # # Upload Workload Directory Zip File
  # - task: FtpUpload@2
  #   displayName: 'FTP Upload VS$(visualStudioVersion) $(version) $(Build.SourceBranchName) Directory Zip File'
  #   inputs:
  #     credentialsOption: inputs
  #     serverUrl: 'ftp://$(MAPPED_FTP_HOST)'
  #     username: $(MAPPED_FTP_USER)
  #     password: $(MAPPED_FTP_PWD)
  #     # TODO : Add option for file instead of directory
  #     rootDirectory: '.'
  #     remoteDirectory: '/public_html/files/$(repositoryName)/$(Build.SourceVersion)'
  #     filePatterns: 'VS$(visualStudioVersion)-$(version)_layout_$(Build.SourceBranchName).zip'

  - publish: VS$(visualStudioVersion)-$(version)_layout_$(Build.SourceBranchName).zip
    artifact: VS$(visualStudioVersion) $(version) $(Build.SourceBranchName)

  - script: |
      CALL megatools-1.11.0-git-20210505-win64\megatools.exe test -d /Root/$(repositoryName) --username $(MAPPED_MEGA_USERNAME) --password $(MAPPED_MEGA_PASSWORD)
      IF ERRORLEVEL 1 (
        CALL megatools-1.11.0-git-20210505-win64\megatools.exe mkdir /Root/$(repositoryName) --username $(MAPPED_MEGA_USERNAME) --password $(MAPPED_MEGA_PASSWORD)
      )
    displayName: 'Mega : Check & Create (if not available) $(repositoryName) Folder'
  - script: CALL megatools-1.11.0-git-20210505-win64\megatools.exe put --path /Root/$(repositoryName)/VS$(visualStudioVersion)-$(version)_layout_$(Build.SourceBranchName).zip VS$(visualStudioVersion)-$(version)_layout_$(Build.SourceBranchName).zip --username $(MAPPED_MEGA_USERNAME) --password $(MAPPED_MEGA_PASSWORD)
    displayName: 'Mega : Upload VS$(visualStudioVersion) $(version) $(Build.SourceBranchName) Directory Zip File'
